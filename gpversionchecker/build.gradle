buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.robohorse'
apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
}

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 27
        versionCode 1060000
        versionName "1.6.0"
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (Exception e) {
    properties.load(project.rootProject.file('bintray.properties').newDataInputStream())
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
}

dependencies {
    implementation 'org.jsoup:jsoup:1.9.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation 'org.robolectric:robolectric:3.0'
    testImplementation 'org.robolectric:shadows-multidex:3.0'
    testImplementation 'commons-io:commons-io:2.5'
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'gpversionchecker'

    publishedGroupId = 'com.robohorse.gpversionchecker'
    libraryName = 'GPVersionChecker'
    artifact = 'gpversionchecker'

    libraryDescription = 'Android library for checking current Google Play version of your application'

    siteUrl = 'https://github.com/robohorse/gpversionchecker'
    gitUrl = 'https://github.com/robohorse/gpversionchecker.git'

    libraryVersion = '1.6.0'

    developerId = 'robohorse'
    developerName = 'Vadim'
    developerEmail = 'robohorsed@gmail.com'

    licenseName = 'The MIT License (MIT)'
    licenseUrl = 'https://opensource.org/licenses/MIT'
    allLicenses = ["MIT"]
}

if (project.rootProject.file('local.properties').exists()) {
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
